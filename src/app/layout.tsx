"use client";

// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { useEffect, useState } from "react";
import { WagmiProvider, deserialize, serialize } from "wagmi";
import { hashFn } from "@wagmi/core/query";
import { createSyncStoragePersister } from "@tanstack/query-sync-storage-persister";
import { QueryClient } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import {
  Persister,
  PersistQueryClientProvider,
} from "@tanstack/react-query-persist-client";
import { config } from "../wagmiConfig";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      gcTime: 1_000 * 60 * 60 * 24, // 24 hours
      /**
       * You will have to pass a custom queryKeyHashFn to your QueryClient for Devtools to
       * correctly serialize BigInt values for display. Alternatively, You can use the
       * hashFn from @wagmi/core/query, which already handles this serialization.
       */
      queryKeyHashFn: hashFn,
    },
  },
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [persister, setPersister] = useState<Persister | null>(null);

  useEffect(() => {
    const syncStoragePersister = createSyncStoragePersister({
      serialize,
      storage: window.localStorage,
      deserialize,
    });
    setPersister(syncStoragePersister);
  }, []);

  return (
    <WagmiProvider config={config}>
      {persister ? (
        <PersistQueryClientProvider
          client={queryClient}
          persistOptions={{ persister }}
        >
          <html lang="en">
            <body className={inter.className}>
              {children}
              <ReactQueryDevtools initialIsOpen={false} />
            </body>
          </html>
        </PersistQueryClientProvider>
      ) : (
        <html lang="en">
          <body className={inter.className}>{children}</body>
        </html>
      )}
    </WagmiProvider>
  );
}
